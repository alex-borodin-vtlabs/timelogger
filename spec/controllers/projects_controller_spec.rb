require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ProjectsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Project. As you add validations to Project, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryGirl.attributes_for(:project)
  }

  let(:invalid_attributes) {
    FactoryGirl.attributes_for(:project).except(:title)
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ProjectsController. Be sure to keep this updated too.
  let(:valid_session) { {} }
  describe "right user" do
    login_user
    describe "GET #index" do
      it "assigns all projects as @projects" do
        FactoryGirl.create_list(:project, 10)

        get :index, format: 'json'

        json = JSON.parse(response.body)

        # test for the 200 status-code
        expect(response).to be_success
        # check to make sure the right amount of messages are returned
        expect(json.length).to eq(10)

      end
    end

    describe "GET #show" do
      it "assigns the requested project as @project" do
        project = Project.create! valid_attributes
        get :show, {id: project.to_param, format: 'json'}
        expect(assigns(:project)).to eq(project)
      end
    end

    describe "POST #create" do
      context "with valid params" do
        it "creates a new Project" do
          expect {
            post :create, {project: valid_attributes, format: 'json'}, valid_session
          }.to change(Project, :count).by(1)
        end

        it "assigns a newly created project as @project" do
          post :create, {project: valid_attributes, format: 'json'}, valid_session
          expect(assigns(:project)).to be_a(Project)
          expect(assigns(:project)).to be_persisted
        end

        it "responds 201" do
          post :create, {project: valid_attributes, format: 'json'}, valid_session
          expect(response).to have_http_status(201)
        end
      end

      context "with invalid params" do
        it "responds 422" do
          post :create, {project: invalid_attributes, format: 'json'}, valid_session
          expect(response).to have_http_status(422)
        end
      end
    end

    describe "PATCH #update" do
      context "with valid params" do
        let(:new_attributes) {
          FactoryGirl.attributes_for(:project, title: "azaza")
        }

        it "updates the requested project" do
          project = Project.create! valid_attributes
          put :update, {id: project.to_param, project: new_attributes, format: 'json'}, valid_session
          project.reload
          expect(assigns(:project)).to eq(project)
        end

        it "assigns the requested project as @project" do
          project = Project.create! valid_attributes
          patch :update, {id: project.to_param, project: valid_attributes, format: 'json'}, valid_session
          expect(assigns(:project)).to eq(project)
        end

        it "response" do
          project = Project.create! valid_attributes
          patch :update, {id: project.to_param, project: valid_attributes, format: 'json'}, valid_session
          expect(response).to have_http_status(200)
        end
      end
    end

    describe "DELETE #destroy" do
      it "destroys the requested project" do
        project = Project.create! valid_attributes
        expect {
          delete :destroy, {id: project.to_param, format: 'json'}, valid_session
        }.to change(Project, :count).by(-1)
      end

      it "response" do
        project = Project.create! valid_attributes
        delete :destroy, {id: project.to_param, format: 'json'}, valid_session
        expect(response).to have_http_status(204)
      end
    end
  end
  describe "wrong user" do
    login_second_user
    describe "GET #index" do
      it "assigns all projects as @projects" do
        FactoryGirl.create_list(:project, 10)

        get :index, format: 'json'

        json = JSON.parse(response.body)

        # test for the 200 status-code
        expect(response).to be_success
        # check to make sure the right amount of messages are returned
        expect(json.length).to eq(0)

      end
    end

    describe "GET #show" do
      it "responds" do
        FactoryGirl.create(:first_user)
        project = Project.create! valid_attributes
        get :show, {id: project.to_param, format: 'json'}
        expect(response).to have_http_status(403)
      end
    end

    describe "PATCH #update" do
      context "with valid params" do
        let(:new_attributes) {
          FactoryGirl.attributes_for(:project, title: "azaza")
        }

        it "response" do
          FactoryGirl.create(:first_user)
          project = Project.create! valid_attributes
          patch :update, {id: project.to_param, project: valid_attributes, format: 'json'}, valid_session
          expect(response).to have_http_status(403)
        end
      end
    end

    describe "DELETE #destroy" do
      it "response" do
        FactoryGirl.create(:first_user)
        project = Project.create! valid_attributes
        delete :destroy, {id: project.to_param, format: 'json'}, valid_session
        expect(response).to have_http_status(403)
      end
    end
  end
end
